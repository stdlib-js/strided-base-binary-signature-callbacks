{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-str' );\nvar Complex64 = require( '@stdlib/complex-float32-ctor' );\nvar Complex128 = require( '@stdlib/complex-float64-ctor' );\nvar wrap = require( '@stdlib/complex-base-wrap-function' );\n\n\n// VARIABLES //\n\nvar C64 = 'complex64';\nvar C128 = 'complex128';\nvar CTORS = {\n\t'complex64': Complex64,\n\t'complex128': Complex128\n};\n\n\n// FUNCTIONS //\n\n/**\n* Resolves a callback based on provided dtypes.\n*\n* @private\n* @param {Object} table - callback table\n* @param {Function} table.default - default callback\n* @param {Function} table.complex64 - callback for single-precision complex floating-point numbers\n* @param {Function} table.complex128 - callback for double-precision complex floating-point numbers\n* @param {string} t1 - dtype for first argument\n* @param {string} t2 - dtype for second argument\n* @param {string} t3 - dtype for return value\n* @returns {Function} callback\n*/\nfunction resolveCallback( table, t1, t2, t3 ) {\n\t// The following branches attempt to follow type promotion rules; however, some accommodations are made for completeness...\n\n\t// Signature: ??_z\n\tif ( t3 === C128 ) {\n\t\t// c?_z\n\t\tif ( t1 === C64 ) {\n\t\t\t// cz_z or cc_z\n\t\t\tif ( t2 === C128 || t2 === C64 ) {\n\t\t\t\treturn table[ C128 ]; // Signature: cz_z_as_zz_z or cc_z_as_zz_z\n\t\t\t}\n\t\t\t// cd_z\n\t\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] ); // Signature: cd_z_as_zz_z\n\t\t}\n\t\t// z?_z\n\t\tif ( t1 === C128 ) {\n\t\t\t// zz_z or zc_z\n\t\t\tif ( t2 === C128 || t2 === C64 ) {\n\t\t\t\treturn table[ C128 ]; // Signature: zz_z or zc_z_as_zz_z\n\t\t\t}\n\t\t\t// zd_z\n\t\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] ); // Signature: zd_z_as_zz_z\n\t\t}\n\t\t// dc_z, dz_z, or dd_z\n\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] ); // Signature: dc_z_as_zz_z, dz_z_as_zz_z, or dd_z_as_zz_z\n\t}\n\t// Signature: ??_c\n\tif ( t3 === C64 ) {\n\t\t// z?_c\n\t\tif ( t1 === C128 ) {\n\t\t\t// zc_c or zz_c (note: according to type promotion rules `zz_c` should not happen, as `z` does not promote to `c`, but we accommodate here anyway)\n\t\t\tif ( t2 === C64 || t2 === C128 ) {\n\t\t\t\treturn table[ C128 ]; // Signature: zc_c_as_zz_z or zz_c_as_zz_z\n\t\t\t}\n\t\t\t// zd_c (note: according to type promotion rules `zd_c` should not happen, as neither `z` nor `d` promote to `c`, but we accommodate here anyway)\n\t\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] ); // Signature: zd_c_as_zz_z\n\t\t}\n\t\t// c?_c\n\t\tif ( t1 === C64 ) {\n\t\t\t// cz_c (note: according to type promotion rules `cz_c` should not happen, as `z` does not promote to `c`, but we accommodate here anyway)\n\t\t\tif ( t2 === C128 ) {\n\t\t\t\treturn table[ C128 ]; // Signature: cz_c_as_zz_z\n\t\t\t}\n\t\t\t// cc_c\n\t\t\tif ( t2 === C64 ) {\n\t\t\t\treturn table[ C64 ]; // Signature: cc_c\n\t\t\t}\n\t\t\t// cd_c (note: in JavaScript, real values are double-precision, but we downcast `d` to `c`, as, according to type promotion rules `cd_c` should not happen, as `d` does not promote to `c`, but `cf_c` can happen)\n\t\t\treturn wrap( table[ C64 ], 2, CTORS[ C64 ] ); // Signature: cd_c_as_cc_c (cf_c_as_cc_c)\n\t\t}\n\t\t// dz_c\n\t\tif ( t2 === C128 ) {\n\t\t\t// Note: according to type promotion rules `dz_c` should not happen, as neither `z` nor `d` promote to `c`, but we accommodate here anyway\n\t\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] ); // Signature: zd_c_as_zz_z\n\t\t}\n\t\t// dc_c\n\t\tif ( t2 === C64 ) {\n\t\t\t// Note: in JavaScript, real values are double-precision, but we downcast `d` to `c`, as, according to type promotion rules `dc_c` should not happen, as `d` does not promote to `c`, but `fc_c` can happen\n\t\t\treturn wrap( table[ C64 ], 2, CTORS[ C64 ] ); // Signature: dc_c_as_cc_c (fc_c_as_cc_c)\n\t\t}\n\t\t// dd_c (note: in JavaScript, real values are double-precision, but we downcast `d` to `c`, as, according to type promotion rules `dd_c` should not happen, as `d` does not promote to `c`, but `ff_c` can happen)\n\t\treturn wrap( table[ C64 ], 2, CTORS[ C64 ] ); // Signature: dd_c_as_cc_c (ff_c_as_cc_c)\n\t}\n\t// Signature: ??_o\n\tif ( t3 === 'generic' ) {\n\t\t// z?_o\n\t\tif ( t1 === C128 ) {\n\t\t\t// zz_o or zc_o\n\t\t\tif ( t2 === C128 || t2 === C64 ) {\n\t\t\t\treturn table[ C128 ]; // Signature: zz_o_as_zz_z or zc_o_as_zz_z\n\t\t\t}\n\t\t\t// zd_o\n\t\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] ); // Signature: zd_o_as_zz_z\n\t\t}\n\t\t// c?_o\n\t\tif ( t1 === C64 ) {\n\t\t\t// cc_o\n\t\t\tif ( t2 === C64 ) {\n\t\t\t\treturn table[ C64 ]; // Signature: cc_o_as_cc_c\n\t\t\t}\n\t\t\t// cz_o\n\t\t\tif ( t2 === C128 ) {\n\t\t\t\treturn table[ C128 ]; // Signature: cz_o_as_zz_z\n\t\t\t}\n\t\t\t// cd_o\n\t\t\treturn wrap( table[ C64 ], 2, CTORS[ C64 ] ); // Signature: cd_o_as_cc_c\n\t\t}\n\t\t// dz_o\n\t\tif ( t2 === C128 ) {\n\t\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] ); // Signature: dz_o_as_zz_z\n\t\t}\n\t\t// dc_o\n\t\tif ( t2 === C64 ) {\n\t\t\treturn wrap( table[ C64 ], 2, CTORS[ C64 ] ); // Signature: dc_o_as_cc_c\n\t\t}\n\t\t// dd_o\n\t\treturn table.default;\n\t}\n\treturn table.default;\n}\n\n\n// MAIN //\n\n/**\n* Assigns callbacks to binary interfaces according to type promotion rules.\n*\n* ## Notes\n*\n* -   The function assumes that the provided signature array has the following properties:\n*\n*     -   a strided array having a stride length of `3` (i.e., every `3` elements define a binary interface signature).\n*     -   for each signature (i.e., set of three consecutive non-overlapping strided array elements), the first two elements are the input data types and the third element is the return data type.\n*     -   all signatures follow type promotion rules.\n*\n* -   Based on type promotion rules, we can simply use the callback for `float64` (i.e., the assumed \"default\") for all interfaces not involving complex numbers, even for `float32`, as we shouldn't need to explicitly downcast strided array values. The only time we need to return `float32` values is when input arrays are already `float32` or of a type which can be safely represented in `float32` without concern for truncation.\n*\n* @param {Object} table - callback table\n* @param {Function} table.default - default callback\n* @param {Function} table.complex64 - callback for single-precision complex floating-point numbers\n* @param {Function} table.complex128 - callback for double-precision complex floating-point numbers\n* @param {ArrayLikeObject} signatures - strided array containing binary interface signatures\n* @returns {Array<Function>} list of callbacks\n*\n* @example\n* var signatures = require( '@stdlib/strided-base-binary-dtype-signatures' );\n* var add = require( '@stdlib/number-float64-base-add' );\n* var cadd = require( '@stdlib/complex-float64-base-add' );\n* var caddf = require( '@stdlib/complex-float32-base-add' );\n*\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [...]\n*\n* var table = {\n*     'default': add,\n*     'complex64': caddf,\n*     'complex128': cadd\n* };\n*\n* var list = callbacks( table, sigs );\n* // returns [...]\n*/\nfunction callbacks( table, signatures ) {\n\tvar out;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < signatures.length; i += 3 ) {\n\t\tt1 = resolve( signatures[ i ] );\n\t\tt2 = resolve( signatures[ i+1 ] );\n\t\tt3 = resolve( signatures[ i+2 ] );\n\t\tout.push( resolveCallback( table, t1, t2, t3 ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = callbacks;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Assign callbacks to binary interfaces according to type promotion rules.\n*\n* @module @stdlib/strided-base-binary-signature-callbacks\n*\n* @example\n* var signatures = require( '@stdlib/strided-base-binary-dtype-signatures' );\n* var add = require( '@stdlib/number-float64-base-add' );\n* var cadd = require( '@stdlib/complex-float64-base-add' );\n* var caddf = require( '@stdlib/complex-float32-base-add' );\n* var callbacks = require( '@stdlib/strided-base-binary-signature-callbacks' );\n*\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [...]\n*\n* var table = {\n*     'default': add,\n*     'complex64': caddf,\n*     'complex128': cadd\n* };\n*\n* var list = callbacks( table, sigs );\n* // returns [...]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,wCAAyC,EAC5DC,EAAY,QAAS,8BAA+B,EACpDC,EAAa,QAAS,8BAA+B,EACrDC,EAAO,QAAS,oCAAqC,EAKrDC,EAAM,YACNC,EAAO,aACPC,EAAQ,CACX,UAAaL,EACb,WAAcC,CACf,EAkBA,SAASK,EAAiBC,EAAOC,EAAIC,EAAIC,EAAK,CAI7C,OAAKA,IAAON,GAENI,IAAOL,GASPK,IAAOJ,KAENK,IAAOL,GAAQK,IAAON,GACnBI,EAAOH,CAAK,EAMdF,EAAMK,EAAOH,CAAK,EAAG,EAAGC,EAAOD,CAAK,CAAE,EAGzCM,IAAOP,EAENK,IAAOJ,EAENK,IAAON,GAAOM,IAAOL,EAClBG,EAAOH,CAAK,EAGbF,EAAMK,EAAOH,CAAK,EAAG,EAAGC,EAAOD,CAAK,CAAE,EAGzCI,IAAOL,EAENM,IAAOL,EACJG,EAAOH,CAAK,EAGfK,IAAON,EACJI,EAAOJ,CAAI,EAGZD,EAAMK,EAAOJ,CAAI,EAAG,EAAGE,EAAOF,CAAI,CAAE,EAGvCM,IAAOL,EAEJF,EAAMK,EAAOH,CAAK,EAAG,EAAGC,EAAOD,CAAK,CAAE,EAKtCF,EAAMK,EAAOJ,CAAI,EAAG,EAAGE,EAAOF,CAAI,CAAE,EAMxCO,IAAO,UAENF,IAAOJ,EAENK,IAAOL,GAAQK,IAAON,EACnBI,EAAOH,CAAK,EAGbF,EAAMK,EAAOH,CAAK,EAAG,EAAGC,EAAOD,CAAK,CAAE,EAGzCI,IAAOL,EAENM,IAAON,EACJI,EAAOJ,CAAI,EAGdM,IAAOL,EACJG,EAAOH,CAAK,EAGbF,EAAMK,EAAOJ,CAAI,EAAG,EAAGE,EAAOF,CAAI,CAAE,EAGvCM,IAAOL,EACJF,EAAMK,EAAOH,CAAK,EAAG,EAAGC,EAAOD,CAAK,CAAE,EAGzCK,IAAON,EACJD,EAAMK,EAAOJ,CAAI,EAAG,EAAGE,EAAOF,CAAI,CAAE,EAGrCI,EAAM,QAEPA,EAAM,OACd,CAkDA,SAASI,EAAWJ,EAAOK,EAAa,CACvC,IAAIC,EACAL,EACAC,EACAC,EACAI,EAGJ,IADAD,EAAM,CAAC,EACDC,EAAI,EAAGA,EAAIF,EAAW,OAAQE,GAAK,EACxCN,EAAKT,EAASa,EAAYE,CAAE,CAAE,EAC9BL,EAAKV,EAASa,EAAYE,EAAE,CAAE,CAAE,EAChCJ,EAAKX,EAASa,EAAYE,EAAE,CAAE,CAAE,EAChCD,EAAI,KAAMP,EAAiBC,EAAOC,EAAIC,EAAIC,CAAG,CAAE,EAEhD,OAAOG,CACR,CAKAf,EAAO,QAAUa,ICxKjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "resolve", "Complex64", "Complex128", "wrap", "C64", "C128", "CTORS", "resolveCallback", "table", "t1", "t2", "t3", "callbacks", "signatures", "out", "i", "main"]
}
